# -*- mode: python -*-

import sys
import SCons

Import("env")
env = env.Clone()
env.CppUnitTest(
    target='platform_test',
    source=[
        'atomic_proxy_test.cpp',
        'atomic_word_test.cpp',
        'bits_test.cpp',
        'endian_test.cpp',
        'mutex_test.cpp',
        'process_id_test.cpp',
        'random_test.cpp',
        'stack_locator_test.cpp',
        'decimal128_test.cpp',
        'decimal128_bson_test.cpp',
        'overflow_arithmetic_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/service_context'
    ]
)

python_testing_files = env.Glob('usdt/python_tester/*', exclude='usdt/python_tester/tests')

# add usdt/python_tester/tester as a subdirectory, not as a flat file
python_testing_files = [ file for file in python_testing_files if file.get_path() != 'usdt/python_tester/tester' ]
python_testing_files.extend(env.Glob('usdt/python_tester/tester/*'))

def InstallFile(env, name, source = None, exclude = []):
    if name in exclude:
        return None
    if not isinstance(source, SCons.Node.FS.Base):
        source = env.Entry(name)
    return env.InstallAs(
        name,
        source.srcnode().get_abspath()
    )

python_testing_targets = [ InstallFile(env, file.get_path(), source = file, exclude = [ 'usdt/python_tester/usdt_probe_tester.py' ]) for file in python_testing_files ]
python_testing_targets = [ target for target in python_testing_targets if target is not None ]

# need target information about this specific file
usdt_probe_test_py = InstallFile(env, 'usdt/python_tester/usdt_probe_tester.py')
        
env.Depends(usdt_probe_test_py, python_testing_targets)

usdt_args_test = env.Program(
    target='usdt/usdt_args_test',
    source=[
        'usdt/usdt_args_test.cpp',
        'usdt/usdt_probe_test.cpp'
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/unittest/unittest'
    ],
)

usdt_test_exes = [
    usdt_args_test[0].name,
]

usdt_probe_test_dict = {
    '@usdt_probe_test_python_interpreter@' : '/usr/bin/python3',
    '@usdt_probe_test_py@' : usdt_probe_test_py[0].name,
    '@usdt_probe_tests@' : ' '.join(usdt_test_exes),
    '@usdt_tmp_dirname@': 'usdt_tmp'
}

usdt_probe_test_wrapper = env.Substfile(
    'usdt/usdt_unittest.py.in',
    SUBST_DICT=usdt_probe_test_dict,
)
env.Depends(usdt_probe_test_wrapper, [usdt_args_test, usdt_probe_test_py])
env.AddPostAction(usdt_probe_test_wrapper[0], Chmod(usdt_probe_test_wrapper[0], 'oug+x'))

env.RegisterUnitTest(usdt_probe_test_wrapper[0])
