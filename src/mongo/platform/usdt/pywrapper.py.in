#!/usr/bin/python3

import os
import subprocess
import sys

# verify bcc is installed
try:
    import bcc
except ImportError:
    print("BCC module not present, USDT tests cannot be run.")
    exit(0)

# create pipes for subprocesses to communicate
cpp_rd, py_wr = os.pipe()
py_rd, cpp_wr = os.pipe()

os.set_inheritable(cpp_rd, True)
os.set_inheritable(cpp_wr, True)
os.set_inheritable(py_rd, True)
os.set_inheritable(py_wr, True)

# set up python child
rp = os.path.realpath(__file__)
dn = os.path.dirname(rp)
exec_py_name = os.path.join(dn, 'python_tester/@usdt_probe_test_py@')
py_interpreter = '@usdt_probe_test_python_interpreter@'
exec_py_name = "sudo {} {} {} {}".format(py_interpreter, exec_py_name, str(py_rd), str(py_wr))

print("Running: {}".format(exec_py_name))
py_pr = subprocess.Popen(args=exec_py_name, shell=True, close_fds=False)

try:
    # run tests
    test_list = '@usdt_probe_tests@'.split()
    for test in test_list:
        exec_cpp_name = os.path.join(dn, test)
        print("Running: {}".format(exec_cpp_name))
        cpp_pr = subprocess.Popen(args=[exec_cpp_name, str(cpp_rd), str(cpp_wr)], executable=exec_cpp_name, close_fds=False)
        cpp_pr.wait()

finally:
    # clean up py child & pipes
    py_pr.kill()
    os.close(cpp_wr)
    os.close(cpp_rd)
    os.close(py_wr)
    os.close(py_rd)

print("Done.")
